txt="import sys
import argparse
import numpy as np
import h5py
import shutil
import os
parser = argparse.ArgumentParser(description='Turn Seurat output into h5 file that could be re-analyzed by Cellranger.')
parser.add_argument('-m', '--matrix', required=True, help = 'Path to mtx file of Seurat output')
parser.add_argument('-c','--crh5', required=True, help = 'Path of the h5 file generated by Cellranger')
parser.add_argument('-o', '--output', required=True, help = 'H5 file to be handled.')
parser.add_argument('--cellranger_path', default = '/home/zyserver/shizhuoxing/software/cellranger-3.1.0/', help = 'Main path of Cellrager.')
args = parser.parse_args()
sys.path.append(args.cellranger_path+'/cellranger-cs/3.1.0/tenkit/lib/python/')
sys.path.append(args.cellranger_path+'/cellranger-cs/3.1.0/lib/python/')
import cellranger.matrix as cr_matrix
mtx = cr_matrix.CountMatrix.load_mtx(args.matrix)
mtx.save_h5_file(args.output)
CR_H5 = args.matrix + '/' + 'tmp.h5'
shutil.copyfile(args.crh5,CR_H5)
with h5py.File(args.output,'r') as seu, h5py.File(CR_H5,'a') as cel:
del cel['matrix/barcodes']
cel.create_dataset('matrix/barcodes', data=seu['matrix/barcodes'])
del cel['matrix/data']
cel.create_dataset('matrix/data', data=seu['matrix/data'])
del cel['matrix/indices']
cel.create_dataset('matrix/indices', data=seu['matrix/indices'])
del cel['matrix/indptr']
cel.create_dataset('matrix/indptr', data=seu['matrix/indptr'])
del cel['matrix/shape']
cel.create_dataset('matrix/shape', data=seu['matrix/shape'])
ftshape = seu['matrix/features/feature_type'].shape[0]
genome_new = np.repeat(cel['matrix/features/genome'][0],ftshape)
del cel['matrix/features/genome']
cel.create_dataset('matrix/features/genome', data=genome_new)
del cel['matrix/features/feature_type']
cel.create_dataset('matrix/features/feature_type', data=seu['matrix/features/feature_type'])
del cel['matrix/features/id']
cel.create_dataset('matrix/features/id', data=seu['matrix/features/id'])
del cel['matrix/features/name']
cel.create_dataset('matrix/features/name', data=seu['matrix/features/name'])
os.remove(args.output)
shutil.copyfile(CR_H5,args.output)
os.remove(CR_H5)
"
write(x,file = "test.py")
write(txt,file = "test.py")
.writePyH5transform(codeFile="scMatrix2CellRangerH5.py"){
txt="import sys
import argparse
import numpy as np
import h5py
import shutil
import os
parser = argparse.ArgumentParser(description='Turn Seurat output into h5 file that could be re-analyzed by Cellranger.')
parser.add_argument('-m', '--matrix', required=True, help = 'Path to mtx file of Seurat output')
parser.add_argument('-c','--crh5', required=True, help = 'Path of the h5 file generated by Cellranger')
parser.add_argument('-o', '--output', required=True, help = 'H5 file to be handled.')
parser.add_argument('--cellranger_path', default = '/home/zyserver/shizhuoxing/software/cellranger-3.1.0/', help = 'Main path of Cellrager.')
args = parser.parse_args()
sys.path.append(args.cellranger_path+'/cellranger-cs/3.1.0/tenkit/lib/python/')
sys.path.append(args.cellranger_path+'/cellranger-cs/3.1.0/lib/python/')
import cellranger.matrix as cr_matrix
mtx = cr_matrix.CountMatrix.load_mtx(args.matrix)
mtx.save_h5_file(args.output)
CR_H5 = args.matrix + '/' + 'tmp.h5'
shutil.copyfile(args.crh5,CR_H5)
with h5py.File(args.output,'r') as seu, h5py.File(CR_H5,'a') as cel:
del cel['matrix/barcodes']
cel.create_dataset('matrix/barcodes', data=seu['matrix/barcodes'])
del cel['matrix/data']
cel.create_dataset('matrix/data', data=seu['matrix/data'])
del cel['matrix/indices']
cel.create_dataset('matrix/indices', data=seu['matrix/indices'])
del cel['matrix/indptr']
cel.create_dataset('matrix/indptr', data=seu['matrix/indptr'])
del cel['matrix/shape']
cel.create_dataset('matrix/shape', data=seu['matrix/shape'])
ftshape = seu['matrix/features/feature_type'].shape[0]
genome_new = np.repeat(cel['matrix/features/genome'][0],ftshape)
del cel['matrix/features/genome']
cel.create_dataset('matrix/features/genome', data=genome_new)
del cel['matrix/features/feature_type']
cel.create_dataset('matrix/features/feature_type', data=seu['matrix/features/feature_type'])
del cel['matrix/features/id']
cel.create_dataset('matrix/features/id', data=seu['matrix/features/id'])
del cel['matrix/features/name']
cel.create_dataset('matrix/features/name', data=seu['matrix/features/name'])
os.remove(args.output)
shutil.copyfile(CR_H5,args.output)
os.remove(CR_H5)
"
write(txt,file = codeFile)
retuen(codeFile)
}
txt="import sys
import argparse
import numpy as np
import h5py
import shutil
import os
parser = argparse.ArgumentParser(description='Turn Seurat output into h5 file that could be re-analyzed by Cellranger.')
parser.add_argument('-m', '--matrix', required=True, help = 'Path to mtx file of Seurat output')
parser.add_argument('-c','--crh5', required=True, help = 'Path of the h5 file generated by Cellranger')
parser.add_argument('-o', '--output', required=True, help = 'H5 file to be handled.')
parser.add_argument('--cellranger_path', default = '/home/zyserver/shizhuoxing/software/cellranger-3.1.0/', help = 'Main path of Cellrager.')
args = parser.parse_args()
sys.path.append(args.cellranger_path+'/cellranger-cs/3.1.0/tenkit/lib/python/')
sys.path.append(args.cellranger_path+'/cellranger-cs/3.1.0/lib/python/')
import cellranger.matrix as cr_matrix
mtx = cr_matrix.CountMatrix.load_mtx(args.matrix)
mtx.save_h5_file(args.output)
CR_H5 = args.matrix + '/' + 'tmp.h5'
shutil.copyfile(args.crh5,CR_H5)
with h5py.File(args.output,'r') as seu, h5py.File(CR_H5,'a') as cel:
del cel['matrix/barcodes']
cel.create_dataset('matrix/barcodes', data=seu['matrix/barcodes'])
del cel['matrix/data']
cel.create_dataset('matrix/data', data=seu['matrix/data'])
del cel['matrix/indices']
cel.create_dataset('matrix/indices', data=seu['matrix/indices'])
del cel['matrix/indptr']
cel.create_dataset('matrix/indptr', data=seu['matrix/indptr'])
del cel['matrix/shape']
cel.create_dataset('matrix/shape', data=seu['matrix/shape'])
ftshape = seu['matrix/features/feature_type'].shape[0]
genome_new = np.repeat(cel['matrix/features/genome'][0],ftshape)
del cel['matrix/features/genome']
cel.create_dataset('matrix/features/genome', data=genome_new)
del cel['matrix/features/feature_type']
cel.create_dataset('matrix/features/feature_type', data=seu['matrix/features/feature_type'])
del cel['matrix/features/id']
cel.create_dataset('matrix/features/id', data=seu['matrix/features/id'])
del cel['matrix/features/name']
cel.create_dataset('matrix/features/name', data=seu['matrix/features/name'])
os.remove(args.output)
shutil.copyfile(CR_H5,args.output)
os.remove(CR_H5)
"
write(txt,file="test.py")
#' write strings into script file
#' @export
.writeCode(txt=NULL,file="tmp",ext=".py"){
stopifnot(ext%in%c(".R",".py",".sh"))
file=paste0(file,ext)
write(txt,file=file)
}
#' write strings into script file
#' @export
.writeCode<-function(txt=NULL,file="tmp",ext=".py"){
stopifnot(ext%in%c(".R",".py",".sh"))
file=paste0(file,ext)
write(txt,file=file)
}
#' transform cutsom matrix into 10X h5 matrix
#'
#' @param crgPython path of  cellranger python,eg(cellranger-3.1.0/miniconda-cr-cs/4.3.21-miniconda-cr-cs-c10/bin/python)
#' @param targetMatrix target matrix want to transform eg(outs/filtered_feature_bc_matrix)
#' @param outH5 h5 file to store output
#' @param path2CRG path of cellranger
.transform10XH5<-function(crgPython="python",
targetMatrix="outs/filtered_feature_bc_matrix",
CRH5="filtered_feature_bc_matrix.h5",
outH5="filtered_feature_bc_matrix_gold.h5",
path2CRG="cellranger"){
code<-.writeCode(txt = scMatrix2CellRangerH5,file = "h5tranformer",ext = ".py")
cmd<-sprintf("%s -m %s -c %s -o %s --cellranger_path %s",
code,targetMatrix,CRH5,outH5,path2CRG)
run <- system2(crgPython, cmd, wait=TRUE, stdout=NULL, stderr=NULL)
}
#' code to transform matrix into 10x h5 matrix
#' @export
scMatrix2CellRangerH5<-"import sys
import argparse
import numpy as np
import h5py
import shutil
import os
parser = argparse.ArgumentParser(description='Turn Seurat output into h5 file that could be re-analyzed by Cellranger.')
parser.add_argument('-m', '--matrix', required=True, help = 'Path to mtx file of Seurat output')
parser.add_argument('-c','--crh5', required=True, help = 'Path of the h5 file generated by Cellranger')
parser.add_argument('-o', '--output', required=True, help = 'H5 file to be handled.')
parser.add_argument('--cellranger_path', default = '/home/zyserver/shizhuoxing/software/cellranger-3.1.0/', help = 'Main path of Cellrager.')
args = parser.parse_args()
sys.path.append(args.cellranger_path+'/cellranger-cs/3.1.0/tenkit/lib/python/')
sys.path.append(args.cellranger_path+'/cellranger-cs/3.1.0/lib/python/')
import cellranger.matrix as cr_matrix
mtx = cr_matrix.CountMatrix.load_mtx(args.matrix)
mtx.save_h5_file(args.output)
CR_H5 = args.matrix + '/' + 'tmp.h5'
shutil.copyfile(args.crh5,CR_H5)
with h5py.File(args.output,'r') as seu, h5py.File(CR_H5,'a') as cel:
del cel['matrix/barcodes']
cel.create_dataset('matrix/barcodes', data=seu['matrix/barcodes'])
del cel['matrix/data']
cel.create_dataset('matrix/data', data=seu['matrix/data'])
del cel['matrix/indices']
cel.create_dataset('matrix/indices', data=seu['matrix/indices'])
del cel['matrix/indptr']
cel.create_dataset('matrix/indptr', data=seu['matrix/indptr'])
del cel['matrix/shape']
cel.create_dataset('matrix/shape', data=seu['matrix/shape'])
ftshape = seu['matrix/features/feature_type'].shape[0]
genome_new = np.repeat(cel['matrix/features/genome'][0],ftshape)
del cel['matrix/features/genome']
cel.create_dataset('matrix/features/genome', data=genome_new)
del cel['matrix/features/feature_type']
cel.create_dataset('matrix/features/feature_type', data=seu['matrix/features/feature_type'])
del cel['matrix/features/id']
cel.create_dataset('matrix/features/id', data=seu['matrix/features/id'])
del cel['matrix/features/name']
cel.create_dataset('matrix/features/name', data=seu['matrix/features/name'])
os.remove(args.output)
shutil.copyfile(CR_H5,args.output)
os.remove(CR_H5)
"
.transform10XH5()
#' transform cutsom matrix into 10X h5 matrix
#'
#' @param crgPython path of  cellranger python,eg(cellranger-3.1.0/miniconda-cr-cs/4.3.21-miniconda-cr-cs-c10/bin/python)
#' @param targetMatrix target matrix want to transform eg(outs/filtered_feature_bc_matrix)
#' @param outH5 h5 file to store output
#' @param path2CRG path of cellranger
.transform10XH5<-function(crgPython="python",
targetMatrix="outs/filtered_feature_bc_matrix",
CRH5="filtered_feature_bc_matrix.h5",
outH5="filtered_feature_bc_matrix_gold.h5",
path2CRG="cellranger"){
code<-.writeCode(txt = scMatrix2CellRangerH5,file = "h5tranformer",ext = ".py")
cmd<-sprintf("%s -m %s -c %s -o %s --cellranger_path %s",
code,targetMatrix,CRH5,outH5,path2CRG)
print(cmd)
#run <- system2(crgPython, cmd, wait=TRUE, stdout=NULL, stderr=NULL)
}
.transform10XH5()
txt<-'cd ${out}/matrix  && awk \'{print $1"\t"$2"\tGene Expression"}\' genes.tsv > features.tsv && rm genes.tsv && sed -i \'s/\./\-/\' barcodes.tsv && gzip *'
"cd %s/matrix  && awk \'{print $1"\t"$2"\tGene Expression"}\' genes.tsv"
roxygen2::roxygenize("E:/Rscripts/MyPackages/yipCat/")
devtools::check("yipCat")
devtools::build("yipCat")
roxygen2::roxygenize("E:/Rscripts/MyPackages/yipCat/")
devtools::check("yipCat")
devtools::build("yipCat")
#Add args to list
args <- mget(names(formals()),sys.frame(sys.nframe()))#as.list(match.call())
library(Seurat)
?Embeddings
seq_len(10)
quantile
??batchtoolsRegistryargs
require(BiocParallel)
library(devtools)
library(roxygen2)
roxygenize("E:/Rscripts/MyPackages/yipCat")
roxygenize("E:/Rscripts/MyPackages/yipCat")
roxygenize("E:/Rscripts/MyPackages/yipCat")
document("E:/Rscripts/MyPackages/yipCat/")
setwd("..")
check("yipCat")
build("yipCat")
roxygenize("E:/Rscripts/MyPackages/yipCat")
check("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
roxygenize("E:/Rscripts/MyPackages/yipCat")
roxygenize("E:/Rscripts/MyPackages/yipCat")
check("yipCat")
build("yipCat")
build("yipCat")
test()
setwd("..")
library(devtools)
library(roxygen2)
roxygenize("E:/Rscripts/MyPackages/yipCat/")
roxygenize("E:/Rscripts/MyPackages/yipCat/")
roxygenize("E:/Rscripts/MyPackages/yipCat/")
config=load("yipCat/data/dd.RData")
config
config
data("d")
config=readRDS("config.rds")
config
names(config)<-c("cytofConfig","cytofSample")
config
save(config,"yipCat/data/config.RData")
save(config,"yipCat/data/config.RData")
save(config,"config.RData")
?save
save(config,file="yipCat/data/config.RData")
roxygenize("E:/Rscripts/MyPackages/yipCat/")
document("E:/Rscripts/MyPackages/yipCat/")
check("yipCat/")
build("yipCat/")
build("yipCat")
setwd("..")
library(roxygen2)
library(devtools)
roxygenize("E:/Rscripts/MyPackages/yipCat/")
check("yipCat/")
build("yipCat")
library(devtools)
library(roxygen)
library(roxygen2)
roxygenize("F:/Rpackage/yipCat")
document("F:/Rpackage/yipCat")
check("F:/Rpackage/yipCat")
build("F:/Rpackage/yipCat")
setwd("../")
library(ggplot2)
library(RColorBrewer)
library(Cairo)
library(showtext)
mydata<- read.csv("left_right_Bar_data.csv",stringsAsFactors=FALSE)
mydata=mydata[!duplicated(mydata$Description),]
head(mydata)
up_mydata<-subset(mydata,cluster=="CD8")
down_mydata=subset(mydata,cluster=="CD4")
down_mydata$Enrichment= -down_mydata$Enrichment
mydata<-rbind(up_mydata,down_mydata)
mydata$Description<-as.character(mydata$Description)
mydata<-transform(mydata, label1=ifelse(Enrichment>=0,Description, NA),
label2=ifelse(Enrichment>0, NA,Description))
mydata$Description <- factor(mydata$Description, levels = mydata$Description[order(mydata$Enrichment)])
ggplot(data = mydata, aes(x =Description, y =Enrichment ,fill = Enrichment)) +
geom_bar(stat = "identity", width = 0.8,colour="black",size=0.25)+
scale_fill_gradient2(low=brewer.pal(7,"Set1")[2],mid="grey90",high=brewer.pal(7,"Set1")[1],midpoint=0)+
geom_text(aes(y = 0,     label=label2),size=3,hjust=-0.1)+ #添加负值部分的数据标签
geom_text(aes(y = -0.001,label=label1),size=3,hjust= 1.1)+ #添加正值部分的数据标签
coord_flip() +   #坐标轴翻转
ylim(-5,5)+
theme_minimal() + #图表主题设定
theme(
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.grid.major.x = element_line(colour = "grey80",size=.25),
panel.grid.minor.x = element_line(colour = "grey80",size=.25),
plot.title=element_text(size=15,hjust=.5),
axis.text.x = element_text(face="plain", color="black",
size=11, angle=0),
axis.text.y = element_blank(),
legend.position="right",
legend.text=element_text(size=10),
legend.title=element_text(size=10))
LeftRightBarPlot<-function(leftDF=NULL,
rightDF=NULL,
pal="Set1",
save=TRUE,
outdir="metascape"){
require(ggplot2)
colNames<-colnames(rightDF)
stopifnot(ncol(leftDF)==ncol(rightDF))
stopifnot("Description"%in%colNames)
stopifnot("Enrichment"%in%colNames)
#leftDF[["cluster"]]=leftName
#rightDF[["cluster"]]=rightName
leftDF$Enrichment= -leftDF$Enrichment
mydata<-rbind(leftDF,rightDF)
mydata$Description<-as.character(mydata$Description)
mydata<-transform(mydata, label1=ifelse(Enrichment>=0,Description, NA),
label2=ifelse(Enrichment>0, NA,Description))
mydata$Description <- factor(mydata$Description, levels = mydata$Description[order(mydata$Enrichment)])
p<-ggplot(data = mydata, aes(x =Description, y =Enrichment ,fill = Enrichment)) +
geom_bar(stat = "identity", width = 0.8,colour="black",size=0.25)+
scale_fill_gradient2(low=brewer.pal(7,"Set1")[2],mid="grey90",high=brewer.pal(7,pal)[1],midpoint=0)+
geom_text(aes(y = 0,     label=label2),size=3,hjust=-0.1)+ #添加负值部分的数据标签
geom_text(aes(y = -0.001,label=label1),size=3,hjust= 1.1)+ #添加正值部分的数据标签
coord_flip() +   #坐标轴翻转
ylim(-5,5)+
theme_minimal() + #图表主题设定
theme(
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.grid.major.x = element_line(colour = "grey80",size=.25),
panel.grid.minor.x = element_line(colour = "grey80",size=.25),
plot.title=element_text(size=15,hjust=.5),
axis.text.x = element_text(face="plain", color="black",
size=11, angle=0),
axis.text.y = element_blank(),
legend.position="right",
legend.text=element_text(size=10),
legend.title=element_text(size=10))
if(save){
if(is.null(outdir)){
outdir="plot"
}
if(!dir.exists(outdir)){
dir.create(outdir,recursive = TRUE)
}
filename<-file.path(outdir,"metascapeGO.pdf")
ggsave(filename = filename,plot = p,width = 8,height = 12)
}
return(p)
}
leftDF=up_mydata
leftDF=down_mydata
righDF=up_mydata
rightDF=up_mydata
LeftRightBarPlot(leftDF = leftDF,rightDF = rightDF)
mydata<- read.csv("left_right_Bar_data.csv",stringsAsFactors=FALSE)
leftDF=mydata[mydata$cluster=="CD4",]
rightDF=mydata[mydata$cluster=="CD8",]
LeftRightBarPlot(leftDF = leftDF,rightDF = rightDF)
LeftRightBarPlot<-function(leftDF=NULL,
rightDF=NULL,
pal="Set1",
save=TRUE,
outdir="metascape"){
require(ggplot2)
colNames<-colnames(rightDF)
stopifnot(ncol(leftDF)==ncol(rightDF))
stopifnot("Description"%in%colNames)
stopifnot("Enrichment"%in%colNames)
#leftDF[["cluster"]]=leftName
#rightDF[["cluster"]]=rightName
leftDF<-leftDF[!duplicated(leftDF$Description),]
rightDF<-rightDF[!duplicated(rightDF$Description),]
mydata[!duplicated(mydata$Description),]
leftDF$Enrichment= -leftDF$Enrichment
mydata<-rbind(leftDF,rightDF)
mydata$Description<-as.character(mydata$Description)
mydata<-transform(mydata, label1=ifelse(Enrichment>=0,Description, NA),
label2=ifelse(Enrichment>0, NA,Description))
mydata$Description <- factor(mydata$Description, levels = mydata$Description[order(mydata$Enrichment)])
p<-ggplot(data = mydata, aes(x =Description, y =Enrichment ,fill = Enrichment)) +
geom_bar(stat = "identity", width = 0.8,colour="black",size=0.25)+
scale_fill_gradient2(low=brewer.pal(7,"Set1")[2],mid="grey90",high=brewer.pal(7,pal)[1],midpoint=0)+
geom_text(aes(y = 0,     label=label2),size=3,hjust=-0.1)+ #添加负值部分的数据标签
geom_text(aes(y = -0.001,label=label1),size=3,hjust= 1.1)+ #添加正值部分的数据标签
coord_flip() +   #坐标轴翻转
ylim(-5,5)+
theme_minimal() + #图表主题设定
theme(
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.grid.major.x = element_line(colour = "grey80",size=.25),
panel.grid.minor.x = element_line(colour = "grey80",size=.25),
plot.title=element_text(size=15,hjust=.5),
axis.text.x = element_text(face="plain", color="black",
size=11, angle=0),
axis.text.y = element_blank(),
legend.position="right",
legend.text=element_text(size=10),
legend.title=element_text(size=10))
if(save){
if(is.null(outdir)){
outdir="plot"
}
if(!dir.exists(outdir)){
dir.create(outdir,recursive = TRUE)
}
filename<-file.path(outdir,"metascapeGO.pdf")
ggsave(filename = filename,plot = p,width = 8,height = 12)
}
return(p)
}
LeftRightBarPlot(leftDF = leftDF,rightDF = rightDF)
mydata=mydata[!duplicated(mydata$Description),]
leftDF=mydata[mydata$cluster=="CD4",]
rightDF=mydata[mydata$cluster=="CD8",]
LeftRightBarPlot(leftDF = leftDF,rightDF = rightDF)
LeftRightBarPlot(leftDF = leftDF,rightDF = rightDF,pal = "Set3")
LeftRightBarPlot(leftDF = leftDF,rightDF = rightDF,pal = "Set1")
library(devtools)
library(roxygen2)
roxygenize("H:/Rpackage/yipCat")
document("H:/Rpackage/yipCat")
check("yipCat")
build("yipCat")
library(yipCat)
metascapeBarPlot(leftDF = leftDF,rightDF = rightDF,pal = "Set1")
setwd("..")
library(devtools)
build("yipCat")
library(devtools)
library(roxygen2)
setwd("..")
roxygenize("H:/Rpackage/yipCat")
library(yipCat)
build("yipCat")
library(ggplot2)
?ggsave
?cat
roxygenize("H:/Rpackage/yipCat")
library(roxygen2)
roxygenize("H:/Rpackage/yipCat")
("H:/Rpackage/yipCat")
library(devtools)
document("H:/Rpackage/yipCat")
setwd("..")
build("yipCat")
