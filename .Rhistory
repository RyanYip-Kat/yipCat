cmd<-sprintf("cd %s  && awk '{print $1\\"\t\\"$2\\"\tGene Expression\\"}' genes.tsv > features.tsv && rm genes.tsv && sed -i 's/\./\-/' barcodes.tsv && gzip *\\"",filename)
return(seurat)
}
.writePyH5transform(codeFile="scMatrix2CellRangerH5.py"){
txt<-"import sys
import argparse
import numpy as np
import h5py
import shutil
import os
parser = argparse.ArgumentParser(description='Turn Seurat output into h5 file that could be re-analyzed by Cellranger.')
parser.add_argument('-m', '--matrix', required=True, help = 'Path to mtx file of Seurat output')
parser.add_argument('-c','--crh5', required=True, help = 'Path of the h5 file generated by Cellranger')
parser.add_argument('-o', '--output', required=True, help = 'H5 file to be handled.')
parser.add_argument('--cellranger_path', default = '/home/zyserver/shizhuoxing/software/cellranger-3.1.0/', help = 'Main path of Cellrager.')
args = parser.parse_args()
sys.path.append(args.cellranger_path+'/cellranger-cs/3.1.0/tenkit/lib/python/')
sys.path.append(args.cellranger_path+'/cellranger-cs/3.1.0/lib/python/')
import cellranger.matrix as cr_matrix
mtx = cr_matrix.CountMatrix.load_mtx(args.matrix)
mtx.save_h5_file(args.output)
CR_H5 = args.matrix + '/' + 'tmp.h5'
shutil.copyfile(args.crh5,CR_H5)
with h5py.File(args.output,'r') as seu, h5py.File(CR_H5,'a') as cel:
del cel['matrix/barcodes']
cel.create_dataset('matrix/barcodes', data=seu['matrix/barcodes'])
del cel['matrix/data']
cel.create_dataset('matrix/data', data=seu['matrix/data'])
del cel['matrix/indices']
cel.create_dataset('matrix/indices', data=seu['matrix/indices'])
del cel['matrix/indptr']
cel.create_dataset('matrix/indptr', data=seu['matrix/indptr'])
del cel['matrix/shape']
cel.create_dataset('matrix/shape', data=seu['matrix/shape'])
ftshape = seu['matrix/features/feature_type'].shape[0]
genome_new = np.repeat(cel['matrix/features/genome'][0],ftshape)
del cel['matrix/features/genome']
cel.create_dataset('matrix/features/genome', data=genome_new)
del cel['matrix/features/feature_type']
cel.create_dataset('matrix/features/feature_type', data=seu['matrix/features/feature_type'])
del cel['matrix/features/id']
cel.create_dataset('matrix/features/id', data=seu['matrix/features/id'])
del cel['matrix/features/name']
cel.create_dataset('matrix/features/name', data=seu['matrix/features/name'])
os.remove(args.output)
shutil.copyfile(CR_H5,args.output)
os.remove(CR_H5)
"
cat(txt,file=codeFile)
return(codeFile)
}
txt="import sys
import argparse
import numpy as np
import h5py
import shutil
import os
parser = argparse.ArgumentParser(description='Turn Seurat output into h5 file that could be re-analyzed by Cellranger.')
parser.add_argument('-m', '--matrix', required=True, help = 'Path to mtx file of Seurat output')
parser.add_argument('-c','--crh5', required=True, help = 'Path of the h5 file generated by Cellranger')
parser.add_argument('-o', '--output', required=True, help = 'H5 file to be handled.')
parser.add_argument('--cellranger_path', default = '/home/zyserver/shizhuoxing/software/cellranger-3.1.0/', help = 'Main path of Cellrager.')
args = parser.parse_args()
sys.path.append(args.cellranger_path+'/cellranger-cs/3.1.0/tenkit/lib/python/')
sys.path.append(args.cellranger_path+'/cellranger-cs/3.1.0/lib/python/')
import cellranger.matrix as cr_matrix
mtx = cr_matrix.CountMatrix.load_mtx(args.matrix)
mtx.save_h5_file(args.output)
CR_H5 = args.matrix + '/' + 'tmp.h5'
shutil.copyfile(args.crh5,CR_H5)
with h5py.File(args.output,'r') as seu, h5py.File(CR_H5,'a') as cel:
del cel['matrix/barcodes']
cel.create_dataset('matrix/barcodes', data=seu['matrix/barcodes'])
del cel['matrix/data']
cel.create_dataset('matrix/data', data=seu['matrix/data'])
del cel['matrix/indices']
cel.create_dataset('matrix/indices', data=seu['matrix/indices'])
del cel['matrix/indptr']
cel.create_dataset('matrix/indptr', data=seu['matrix/indptr'])
del cel['matrix/shape']
cel.create_dataset('matrix/shape', data=seu['matrix/shape'])
ftshape = seu['matrix/features/feature_type'].shape[0]
genome_new = np.repeat(cel['matrix/features/genome'][0],ftshape)
del cel['matrix/features/genome']
cel.create_dataset('matrix/features/genome', data=genome_new)
del cel['matrix/features/feature_type']
cel.create_dataset('matrix/features/feature_type', data=seu['matrix/features/feature_type'])
del cel['matrix/features/id']
cel.create_dataset('matrix/features/id', data=seu['matrix/features/id'])
del cel['matrix/features/name']
cel.create_dataset('matrix/features/name', data=seu['matrix/features/name'])
os.remove(args.output)
shutil.copyfile(CR_H5,args.output)
os.remove(CR_H5)
"
txt
write(txt,file = "test.py")
.writePyH5transform(codeFile="scMatrix2CellRangerH5.py"){
txt="import sys
import argparse
import numpy as np
import h5py
import shutil
import os
parser = argparse.ArgumentParser(description='Turn Seurat output into h5 file that could be re-analyzed by Cellranger.')
parser.add_argument('-m', '--matrix', required=True, help = 'Path to mtx file of Seurat output')
parser.add_argument('-c','--crh5', required=True, help = 'Path of the h5 file generated by Cellranger')
parser.add_argument('-o', '--output', required=True, help = 'H5 file to be handled.')
parser.add_argument('--cellranger_path', default = '/home/zyserver/shizhuoxing/software/cellranger-3.1.0/', help = 'Main path of Cellrager.')
args = parser.parse_args()
sys.path.append(args.cellranger_path+'/cellranger-cs/3.1.0/tenkit/lib/python/')
sys.path.append(args.cellranger_path+'/cellranger-cs/3.1.0/lib/python/')
import cellranger.matrix as cr_matrix
mtx = cr_matrix.CountMatrix.load_mtx(args.matrix)
mtx.save_h5_file(args.output)
CR_H5 = args.matrix + '/' + 'tmp.h5'
shutil.copyfile(args.crh5,CR_H5)
with h5py.File(args.output,'r') as seu, h5py.File(CR_H5,'a') as cel:
del cel['matrix/barcodes']
cel.create_dataset('matrix/barcodes', data=seu['matrix/barcodes'])
del cel['matrix/data']
cel.create_dataset('matrix/data', data=seu['matrix/data'])
del cel['matrix/indices']
cel.create_dataset('matrix/indices', data=seu['matrix/indices'])
del cel['matrix/indptr']
cel.create_dataset('matrix/indptr', data=seu['matrix/indptr'])
del cel['matrix/shape']
cel.create_dataset('matrix/shape', data=seu['matrix/shape'])
ftshape = seu['matrix/features/feature_type'].shape[0]
genome_new = np.repeat(cel['matrix/features/genome'][0],ftshape)
del cel['matrix/features/genome']
cel.create_dataset('matrix/features/genome', data=genome_new)
del cel['matrix/features/feature_type']
cel.create_dataset('matrix/features/feature_type', data=seu['matrix/features/feature_type'])
del cel['matrix/features/id']
cel.create_dataset('matrix/features/id', data=seu['matrix/features/id'])
del cel['matrix/features/name']
cel.create_dataset('matrix/features/name', data=seu['matrix/features/name'])
os.remove(args.output)
shutil.copyfile(CR_H5,args.output)
os.remove(CR_H5)
"
cat(txt,file=codeFile)
return(codeFile)
}
txt="import sys
import argparse
import numpy as np
import h5py
import shutil
import os
parser = argparse.ArgumentParser(description='Turn Seurat output into h5 file that could be re-analyzed by Cellranger.')
parser.add_argument('-m', '--matrix', required=True, help = 'Path to mtx file of Seurat output')
parser.add_argument('-c','--crh5', required=True, help = 'Path of the h5 file generated by Cellranger')
parser.add_argument('-o', '--output', required=True, help = 'H5 file to be handled.')
parser.add_argument('--cellranger_path', default = '/home/zyserver/shizhuoxing/software/cellranger-3.1.0/', help = 'Main path of Cellrager.')
args = parser.parse_args()
sys.path.append(args.cellranger_path+'/cellranger-cs/3.1.0/tenkit/lib/python/')
sys.path.append(args.cellranger_path+'/cellranger-cs/3.1.0/lib/python/')
import cellranger.matrix as cr_matrix
mtx = cr_matrix.CountMatrix.load_mtx(args.matrix)
mtx.save_h5_file(args.output)
CR_H5 = args.matrix + '/' + 'tmp.h5'
shutil.copyfile(args.crh5,CR_H5)
with h5py.File(args.output,'r') as seu, h5py.File(CR_H5,'a') as cel:
del cel['matrix/barcodes']
cel.create_dataset('matrix/barcodes', data=seu['matrix/barcodes'])
del cel['matrix/data']
cel.create_dataset('matrix/data', data=seu['matrix/data'])
del cel['matrix/indices']
cel.create_dataset('matrix/indices', data=seu['matrix/indices'])
del cel['matrix/indptr']
cel.create_dataset('matrix/indptr', data=seu['matrix/indptr'])
del cel['matrix/shape']
cel.create_dataset('matrix/shape', data=seu['matrix/shape'])
ftshape = seu['matrix/features/feature_type'].shape[0]
genome_new = np.repeat(cel['matrix/features/genome'][0],ftshape)
del cel['matrix/features/genome']
cel.create_dataset('matrix/features/genome', data=genome_new)
del cel['matrix/features/feature_type']
cel.create_dataset('matrix/features/feature_type', data=seu['matrix/features/feature_type'])
del cel['matrix/features/id']
cel.create_dataset('matrix/features/id', data=seu['matrix/features/id'])
del cel['matrix/features/name']
cel.create_dataset('matrix/features/name', data=seu['matrix/features/name'])
os.remove(args.output)
shutil.copyfile(CR_H5,args.output)
os.remove(CR_H5)
"
write(txt,"test.py")
txt="import sys
import argparse
import numpy as np
import h5py
import shutil
import os
parser = argparse.ArgumentParser(description='Turn Seurat output into h5 file that could be re-analyzed by Cellranger.')
parser.add_argument('-m', '--matrix', required=True, help = 'Path to mtx file of Seurat output')
parser.add_argument('-c','--crh5', required=True, help = 'Path of the h5 file generated by Cellranger')
parser.add_argument('-o', '--output', required=True, help = 'H5 file to be handled.')
parser.add_argument('--cellranger_path', default = '/home/zyserver/shizhuoxing/software/cellranger-3.1.0/', help = 'Main path of Cellrager.')
args = parser.parse_args()
sys.path.append(args.cellranger_path+'/cellranger-cs/3.1.0/tenkit/lib/python/')
sys.path.append(args.cellranger_path+'/cellranger-cs/3.1.0/lib/python/')
import cellranger.matrix as cr_matrix
mtx = cr_matrix.CountMatrix.load_mtx(args.matrix)
mtx.save_h5_file(args.output)
CR_H5 = args.matrix + '/' + 'tmp.h5'
shutil.copyfile(args.crh5,CR_H5)
with h5py.File(args.output,'r') as seu, h5py.File(CR_H5,'a') as cel:
del cel['matrix/barcodes']
cel.create_dataset('matrix/barcodes', data=seu['matrix/barcodes'])
del cel['matrix/data']
cel.create_dataset('matrix/data', data=seu['matrix/data'])
del cel['matrix/indices']
cel.create_dataset('matrix/indices', data=seu['matrix/indices'])
del cel['matrix/indptr']
cel.create_dataset('matrix/indptr', data=seu['matrix/indptr'])
del cel['matrix/shape']
cel.create_dataset('matrix/shape', data=seu['matrix/shape'])
ftshape = seu['matrix/features/feature_type'].shape[0]
genome_new = np.repeat(cel['matrix/features/genome'][0],ftshape)
del cel['matrix/features/genome']
cel.create_dataset('matrix/features/genome', data=genome_new)
del cel['matrix/features/feature_type']
cel.create_dataset('matrix/features/feature_type', data=seu['matrix/features/feature_type'])
del cel['matrix/features/id']
cel.create_dataset('matrix/features/id', data=seu['matrix/features/id'])
del cel['matrix/features/name']
cel.create_dataset('matrix/features/name', data=seu['matrix/features/name'])
os.remove(args.output)
shutil.copyfile(CR_H5,args.output)
os.remove(CR_H5)
"
write(x,file = "test.py")
write(txt,file = "test.py")
.writePyH5transform(codeFile="scMatrix2CellRangerH5.py"){
txt="import sys
import argparse
import numpy as np
import h5py
import shutil
import os
parser = argparse.ArgumentParser(description='Turn Seurat output into h5 file that could be re-analyzed by Cellranger.')
parser.add_argument('-m', '--matrix', required=True, help = 'Path to mtx file of Seurat output')
parser.add_argument('-c','--crh5', required=True, help = 'Path of the h5 file generated by Cellranger')
parser.add_argument('-o', '--output', required=True, help = 'H5 file to be handled.')
parser.add_argument('--cellranger_path', default = '/home/zyserver/shizhuoxing/software/cellranger-3.1.0/', help = 'Main path of Cellrager.')
args = parser.parse_args()
sys.path.append(args.cellranger_path+'/cellranger-cs/3.1.0/tenkit/lib/python/')
sys.path.append(args.cellranger_path+'/cellranger-cs/3.1.0/lib/python/')
import cellranger.matrix as cr_matrix
mtx = cr_matrix.CountMatrix.load_mtx(args.matrix)
mtx.save_h5_file(args.output)
CR_H5 = args.matrix + '/' + 'tmp.h5'
shutil.copyfile(args.crh5,CR_H5)
with h5py.File(args.output,'r') as seu, h5py.File(CR_H5,'a') as cel:
del cel['matrix/barcodes']
cel.create_dataset('matrix/barcodes', data=seu['matrix/barcodes'])
del cel['matrix/data']
cel.create_dataset('matrix/data', data=seu['matrix/data'])
del cel['matrix/indices']
cel.create_dataset('matrix/indices', data=seu['matrix/indices'])
del cel['matrix/indptr']
cel.create_dataset('matrix/indptr', data=seu['matrix/indptr'])
del cel['matrix/shape']
cel.create_dataset('matrix/shape', data=seu['matrix/shape'])
ftshape = seu['matrix/features/feature_type'].shape[0]
genome_new = np.repeat(cel['matrix/features/genome'][0],ftshape)
del cel['matrix/features/genome']
cel.create_dataset('matrix/features/genome', data=genome_new)
del cel['matrix/features/feature_type']
cel.create_dataset('matrix/features/feature_type', data=seu['matrix/features/feature_type'])
del cel['matrix/features/id']
cel.create_dataset('matrix/features/id', data=seu['matrix/features/id'])
del cel['matrix/features/name']
cel.create_dataset('matrix/features/name', data=seu['matrix/features/name'])
os.remove(args.output)
shutil.copyfile(CR_H5,args.output)
os.remove(CR_H5)
"
write(txt,file = codeFile)
retuen(codeFile)
}
txt="import sys
import argparse
import numpy as np
import h5py
import shutil
import os
parser = argparse.ArgumentParser(description='Turn Seurat output into h5 file that could be re-analyzed by Cellranger.')
parser.add_argument('-m', '--matrix', required=True, help = 'Path to mtx file of Seurat output')
parser.add_argument('-c','--crh5', required=True, help = 'Path of the h5 file generated by Cellranger')
parser.add_argument('-o', '--output', required=True, help = 'H5 file to be handled.')
parser.add_argument('--cellranger_path', default = '/home/zyserver/shizhuoxing/software/cellranger-3.1.0/', help = 'Main path of Cellrager.')
args = parser.parse_args()
sys.path.append(args.cellranger_path+'/cellranger-cs/3.1.0/tenkit/lib/python/')
sys.path.append(args.cellranger_path+'/cellranger-cs/3.1.0/lib/python/')
import cellranger.matrix as cr_matrix
mtx = cr_matrix.CountMatrix.load_mtx(args.matrix)
mtx.save_h5_file(args.output)
CR_H5 = args.matrix + '/' + 'tmp.h5'
shutil.copyfile(args.crh5,CR_H5)
with h5py.File(args.output,'r') as seu, h5py.File(CR_H5,'a') as cel:
del cel['matrix/barcodes']
cel.create_dataset('matrix/barcodes', data=seu['matrix/barcodes'])
del cel['matrix/data']
cel.create_dataset('matrix/data', data=seu['matrix/data'])
del cel['matrix/indices']
cel.create_dataset('matrix/indices', data=seu['matrix/indices'])
del cel['matrix/indptr']
cel.create_dataset('matrix/indptr', data=seu['matrix/indptr'])
del cel['matrix/shape']
cel.create_dataset('matrix/shape', data=seu['matrix/shape'])
ftshape = seu['matrix/features/feature_type'].shape[0]
genome_new = np.repeat(cel['matrix/features/genome'][0],ftshape)
del cel['matrix/features/genome']
cel.create_dataset('matrix/features/genome', data=genome_new)
del cel['matrix/features/feature_type']
cel.create_dataset('matrix/features/feature_type', data=seu['matrix/features/feature_type'])
del cel['matrix/features/id']
cel.create_dataset('matrix/features/id', data=seu['matrix/features/id'])
del cel['matrix/features/name']
cel.create_dataset('matrix/features/name', data=seu['matrix/features/name'])
os.remove(args.output)
shutil.copyfile(CR_H5,args.output)
os.remove(CR_H5)
"
write(txt,file="test.py")
#' write strings into script file
#' @export
.writeCode(txt=NULL,file="tmp",ext=".py"){
stopifnot(ext%in%c(".R",".py",".sh"))
file=paste0(file,ext)
write(txt,file=file)
}
#' write strings into script file
#' @export
.writeCode<-function(txt=NULL,file="tmp",ext=".py"){
stopifnot(ext%in%c(".R",".py",".sh"))
file=paste0(file,ext)
write(txt,file=file)
}
#' transform cutsom matrix into 10X h5 matrix
#'
#' @param crgPython path of  cellranger python,eg(cellranger-3.1.0/miniconda-cr-cs/4.3.21-miniconda-cr-cs-c10/bin/python)
#' @param targetMatrix target matrix want to transform eg(outs/filtered_feature_bc_matrix)
#' @param outH5 h5 file to store output
#' @param path2CRG path of cellranger
.transform10XH5<-function(crgPython="python",
targetMatrix="outs/filtered_feature_bc_matrix",
CRH5="filtered_feature_bc_matrix.h5",
outH5="filtered_feature_bc_matrix_gold.h5",
path2CRG="cellranger"){
code<-.writeCode(txt = scMatrix2CellRangerH5,file = "h5tranformer",ext = ".py")
cmd<-sprintf("%s -m %s -c %s -o %s --cellranger_path %s",
code,targetMatrix,CRH5,outH5,path2CRG)
run <- system2(crgPython, cmd, wait=TRUE, stdout=NULL, stderr=NULL)
}
#' code to transform matrix into 10x h5 matrix
#' @export
scMatrix2CellRangerH5<-"import sys
import argparse
import numpy as np
import h5py
import shutil
import os
parser = argparse.ArgumentParser(description='Turn Seurat output into h5 file that could be re-analyzed by Cellranger.')
parser.add_argument('-m', '--matrix', required=True, help = 'Path to mtx file of Seurat output')
parser.add_argument('-c','--crh5', required=True, help = 'Path of the h5 file generated by Cellranger')
parser.add_argument('-o', '--output', required=True, help = 'H5 file to be handled.')
parser.add_argument('--cellranger_path', default = '/home/zyserver/shizhuoxing/software/cellranger-3.1.0/', help = 'Main path of Cellrager.')
args = parser.parse_args()
sys.path.append(args.cellranger_path+'/cellranger-cs/3.1.0/tenkit/lib/python/')
sys.path.append(args.cellranger_path+'/cellranger-cs/3.1.0/lib/python/')
import cellranger.matrix as cr_matrix
mtx = cr_matrix.CountMatrix.load_mtx(args.matrix)
mtx.save_h5_file(args.output)
CR_H5 = args.matrix + '/' + 'tmp.h5'
shutil.copyfile(args.crh5,CR_H5)
with h5py.File(args.output,'r') as seu, h5py.File(CR_H5,'a') as cel:
del cel['matrix/barcodes']
cel.create_dataset('matrix/barcodes', data=seu['matrix/barcodes'])
del cel['matrix/data']
cel.create_dataset('matrix/data', data=seu['matrix/data'])
del cel['matrix/indices']
cel.create_dataset('matrix/indices', data=seu['matrix/indices'])
del cel['matrix/indptr']
cel.create_dataset('matrix/indptr', data=seu['matrix/indptr'])
del cel['matrix/shape']
cel.create_dataset('matrix/shape', data=seu['matrix/shape'])
ftshape = seu['matrix/features/feature_type'].shape[0]
genome_new = np.repeat(cel['matrix/features/genome'][0],ftshape)
del cel['matrix/features/genome']
cel.create_dataset('matrix/features/genome', data=genome_new)
del cel['matrix/features/feature_type']
cel.create_dataset('matrix/features/feature_type', data=seu['matrix/features/feature_type'])
del cel['matrix/features/id']
cel.create_dataset('matrix/features/id', data=seu['matrix/features/id'])
del cel['matrix/features/name']
cel.create_dataset('matrix/features/name', data=seu['matrix/features/name'])
os.remove(args.output)
shutil.copyfile(CR_H5,args.output)
os.remove(CR_H5)
"
.transform10XH5()
#' transform cutsom matrix into 10X h5 matrix
#'
#' @param crgPython path of  cellranger python,eg(cellranger-3.1.0/miniconda-cr-cs/4.3.21-miniconda-cr-cs-c10/bin/python)
#' @param targetMatrix target matrix want to transform eg(outs/filtered_feature_bc_matrix)
#' @param outH5 h5 file to store output
#' @param path2CRG path of cellranger
.transform10XH5<-function(crgPython="python",
targetMatrix="outs/filtered_feature_bc_matrix",
CRH5="filtered_feature_bc_matrix.h5",
outH5="filtered_feature_bc_matrix_gold.h5",
path2CRG="cellranger"){
code<-.writeCode(txt = scMatrix2CellRangerH5,file = "h5tranformer",ext = ".py")
cmd<-sprintf("%s -m %s -c %s -o %s --cellranger_path %s",
code,targetMatrix,CRH5,outH5,path2CRG)
print(cmd)
#run <- system2(crgPython, cmd, wait=TRUE, stdout=NULL, stderr=NULL)
}
.transform10XH5()
txt<-'cd ${out}/matrix  && awk \'{print $1"\t"$2"\tGene Expression"}\' genes.tsv > features.tsv && rm genes.tsv && sed -i \'s/\./\-/\' barcodes.tsv && gzip *'
"cd %s/matrix  && awk \'{print $1"\t"$2"\tGene Expression"}\' genes.tsv"
roxygen2::roxygenize("E:/Rscripts/MyPackages/yipCat/")
devtools::check("yipCat")
devtools::build("yipCat")
roxygen2::roxygenize("E:/Rscripts/MyPackages/yipCat/")
devtools::check("yipCat")
devtools::build("yipCat")
#Add args to list
args <- mget(names(formals()),sys.frame(sys.nframe()))#as.list(match.call())
library(Seurat)
?Embeddings
seq_len(10)
quantile
??batchtoolsRegistryargs
require(BiocParallel)
library(devtools)
library(roxygen2)
roxygenize("E:/Rscripts/MyPackages/yipCat")
roxygenize("E:/Rscripts/MyPackages/yipCat")
roxygenize("E:/Rscripts/MyPackages/yipCat")
document("E:/Rscripts/MyPackages/yipCat/")
setwd("..")
check("yipCat")
build("yipCat")
roxygenize("E:/Rscripts/MyPackages/yipCat")
check("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
build("yipCat")
roxygenize("E:/Rscripts/MyPackages/yipCat")
roxygenize("E:/Rscripts/MyPackages/yipCat")
check("yipCat")
build("yipCat")
build("yipCat")
test()
setwd("..")
library(devtools)
library(roxygen2)
roxygenize("E:/Rscripts/MyPackages/yipCat/")
roxygenize("E:/Rscripts/MyPackages/yipCat/")
roxygenize("E:/Rscripts/MyPackages/yipCat/")
config=load("yipCat/data/dd.RData")
config
config
data("d")
config=readRDS("config.rds")
config
names(config)<-c("cytofConfig","cytofSample")
config
save(config,"yipCat/data/config.RData")
save(config,"yipCat/data/config.RData")
save(config,"config.RData")
?save
save(config,file="yipCat/data/config.RData")
roxygenize("E:/Rscripts/MyPackages/yipCat/")
document("E:/Rscripts/MyPackages/yipCat/")
check("yipCat/")
build("yipCat/")
build("yipCat")
setwd("..")
library(roxygen2)
library(devtools)
roxygenize("E:/Rscripts/MyPackages/yipCat/")
check("yipCat/")
build("yipCat")
