stopifnot(length(celltype)>2)
gene_list<-list()
for(cell in celltype){
x<-subset(markers,cluster==cell)
genes<-unique(x$gene)
gene_list[[cell]]<-genes
}
#if(is.null(vennColor)){
#  vennColor<-"Set3"
#}
p = venn.diagram(
x = gene_list,
category.names = str_replace(names(gene_list),"\\."," "),
filename = NULL,
output=TRUE,
fill = brewer.pal(length(gene_list), "Set2"),
col = brewer.pal(length(gene_list), "Set3"),
fontface = "bold",
cat.col = "black",#brewer.pal(length(DF1_list), "Set3"),
cat.fontface = "bold"
)
makedir(outdir)
plotFile<-file.path(outdir,"venn.pdf")
pdf(file = plotFile,width = width,height =height)
grid.draw(p)
dev.off()
}else{
stop("Invalid plotAS!!!")
}
message("Done!")
}
DAvenn(deDF=DF,plotAS = "upset")
DAvenn(deDF=DF,plotAS = "venn")
markers=DF
celltype<-unique(markers$cluster)
stopifnot(length(celltype)>2)
gene_list<-list()
for(cell in celltype){
x<-subset(markers,cluster==cell)
genes<-unique(x$gene)
gene_list[[cell]]<-genes
}
#if(is.null(vennColor)){
#  vennColor<-"Set3"
#}
p = venn.diagram(
x = gene_list,
category.names = str_replace(names(gene_list),"\\."," "),
filename = NULL,
output=TRUE,
fill = brewer.pal(length(gene_list), "Set2"),
col = brewer.pal(length(gene_list), "Set3"),
fontface = "bold",
cat.col = "black",#brewer.pal(length(DF1_list), "Set3"),
cat.fontface = "bold"
)
brewer.pal(length(gene_list), "Set2")
brewer.pal(length(gene_list), "Set3")
p = venn.diagram(
x = gene_list,
category.names = str_replace(names(gene_list),"\\."," "),
filename = NULL,
output=TRUE,
fill = brewer.pal(length(gene_list), "Set2"),
col = brewer.pal(length(gene_list), "Set3"),
fontface = "bold",
cat.col = "black",#brewer.pal(length(DF1_list), "Set3"),
cat.fontface = "bold"
)
names(gene_list)
str_replace(names(gene_list),"\\."," ")
markers=subset(markers,cluster%in%c("TB","ABC","NKTB"))
p = venn.diagram(
x = gene_list,
category.names = str_replace(names(gene_list),"\\."," "),
filename = NULL,
output=TRUE,
fill = brewer.pal(length(gene_list), "Set2"),
col = brewer.pal(length(gene_list), "Set3"),
fontface = "bold",
cat.col = "black",#brewer.pal(length(DF1_list), "Set3"),
cat.fontface = "bold"
)
DF1_list=gene_list
p = venn.diagram(
x = DF1_list,
category.names = str_replace(names(DF1_list),"\\."," "),
#filename = 'venn1.pdf',
filename = NULL,
output=TRUE,
fill = brewer.pal(length(DF1_list), "Set2"),
col = brewer.pal(length(DF1_list), "Set3"),
fontface = "bold",
cat.col = "black",#brewer.pal(length(DF1_list), "Set3"),
cat.fontface = "bold"
)
str(gene_list)
venn.diagram(x=gene_list,category.names = str_replace(names(DF1_list),"\\."," "))
venn.diagram(x=gene_list,category.names = str_replace(names(DF1_list),"\\."," "),filename = NULL)
venn.diagram(x=list(DF1_list[[1]],DF1_list[[2]]),filename = NULL)
head(marrkers)
head(markers)
DAvenn(deDF=DF,plotAS = "upset")
setwd(..)
setwd("..")
library(devtools)
library(roxygen2)
roxygenize("E:/Rscripts/MyPackages/yipCat")
install_local("yipCat")
install_local("yipCat",force = T)
library(Seurat)
?ScaleData
?RunPCA
library(harmony)
library(stringr)
setwd("..")
library(devtools)
library(roxygen2)
roxygenize("H:/Rpackage/yipCat")
build("yipCat")
?CreateSeuratObject
build("yipCat")
roxygenize("H:/Rpackage/yipCat")
build("yipCat")
roxygenize("H:/Rpackage/yipCat")
build("yipCat")
setwd("..")
setwd("../ShiSurv/")
rowZscores<-function (m = NULL, min = -2, max = 2, limit = FALSE)
{
z <- sweep(m - Matrix::rowMeans(m), 1, matrixStats::rowSds(m), `/`)
if (limit) {
z[z > max] <- max
z[z < min] <- min
}
return(z)
}
library(stringr)
library(survival)
library(igraph)
tfgDF=readRDS("t2gDF.rds")
targetTF<-"NFKB1"
targetDF<-subset(tfgDF,str_detect(TF,targetTF))
targetGenes<-as.character(unique(targetDF$Gene))
bulkMat=readRDS("dfsymbol.rds")
targetBulkMat=bulkMat[targetGenes,]
targetZscore=rowZscores(as.matrix(targetBulkMat))
TG_expression=Matrix::colMeans(targetZscore,na.rm = TRUE)
TG_expression
timeDF<-read.csv("clinicalinfo_lnc_v1.csv")
dim(timeDF)
dim(TG_expression)
length(TG_expression)
timeDF$TGExp<-TG_expression
View(timeDF)
timeDF<-read.csv("clinicalinfo_lnc_v1.csv",row.names = 1)
View(timeDF)
timeDF$TGExp<-TG_expression[rownames(timeDF)]
names(TG_expression)
View(timeDF)
TG_expression
bulkMat
View(bulkMat)
write.table(bulkMat,"dfsymbol.csv",sep=",",quote = F)
bulkMat<-read.csv("dfsymbol.csv",stringsAsFactors = F)
View(bulkMat)
bulkMat=readRDS("dfsymbol.rds")
TG_expression[str_detect(names(TG_expression),rownames(timeDF))]
TG_expression
df=data.frame("sample"=names(TG_expression),expr"=TG_expression)
)"
df=data.frame("sample"=names(TG_expression),"expr"=TG_expression)
df
write.table(df,"TG_expression.csv",row.names = F,quote = F,sep=",")
names(TG_expression)
colnames(bulkMat)
df=read.csv("TG_expression.csv",row.names = 1)
df
names(TG_expression)
colnames(bulkMat)
rownames(df)
rownames(df)%in%rownames(timeDF)
setdiff(rownames(df),rownames(timeDF))
setdiff(rownames(timeDF),rownames(df))
timeDF<-read.csv("clinicalinfo_lnc_v1.csv",row.names = 1)
df=read.csv("TG_expression.csv",row.names = 1)
setdiff(rownames(timeDF),rownames(df))
rownames(timeDF)
rownames(df)
colnames(bulkMat)
colnames(bulkMat)=rownames(df)
setdiff(rownames(timeDF),rownames(df))
View(bulkMat)
saveRDS(bulkMat,"dfsymbol.rds")
rowZscores<-function (m = NULL, min = -2, max = 2, limit = FALSE)
{
z <- sweep(m - Matrix::rowMeans(m), 1, matrixStats::rowSds(m), `/`)
if (limit) {
z[z > max] <- max
z[z < min] <- min
}
return(z)
}
library(stringr)
library(survival)
library(igraph)
tfgDF=readRDS("t2gDF.rds")
targetTF<-"NFKB1"
targetDF<-subset(tfgDF,str_detect(TF,targetTF))
targetGenes<-as.character(unique(targetDF$Gene))
bulkMat=readRDS("dfsymbol.rds")
targetBulkMat=bulkMat[targetGenes,]
targetZscore=rowZscores(as.matrix(targetBulkMat))
TG_expression=Matrix::colMeans(targetZscore,na.rm = TRUE)
timeDF<-read.csv("clinicalinfo_lnc_v1.csv",row.names = 1)
timeDF$TGExp<-TG_expression[rownames(timeDF)]
View(timeDF)
?survival
?Surv
head(timeDF)
?survfit
mod<-survfit(Surv(time,Status)~TGExp,data=timeDF)
mod<-survfit(Surv(time,status)~TGExp,data=timeDF)
mod
plot(mod)
rowZscores<-function (m = NULL, min = -2, max = 2, limit = FALSE)
{
z <- sweep(m - Matrix::rowMeans(m), 1, matrixStats::rowSds(m), `/`)
if (limit) {
z[z > max] <- max
z[z < min] <- min
}
return(z)
}
library(stringr)
library(survival)
library(igraph)
tfgDF=readRDS("t2gDF.rds")
targetTF<-"NFKB1"
targetDF<-subset(tfgDF,str_detect(TF,targetTF))
targetGenes<-as.character(unique(targetDF$Gene))
bulkMat=readRDS("dfsymbol.rds")
targetBulkMat=bulkMat[targetGenes,]
targetZscore=rowZscores(as.matrix(targetBulkMat),min = 0,max = 2.5)
TG_expression=Matrix::colMeans(targetZscore,na.rm = TRUE)
timeDF<-read.csv("clinicalinfo_lnc_v1.csv",row.names = 1)
timeDF$TGExp<-TG_expression[rownames(timeDF)]
mod<-survfit(Surv(time,status)~TGExp,data=timeDF)
##########################
plot(mod)
str(lung)
str(timeDF)
timeDF$time<-as.numeric(timeDF$time)
timeDF$status<-as.numeric(timeDF$status)
str(timeDF)
mod<-survfit(Surv(time,status)~TGExp,data=timeDF)
plot(mod)
x=survfit(Surv(time, status) ~ ph.ecog, data=lung)
plot(x)
timeDF1<-timeDF
timeDF1$time<-timeDF1$time+sample(-10:100,size = nrow(timeDF1))
mod<-survfit(Surv(time,status)~TGExp,data=timeDF1)
plot(mod)
mod<-survfit(Surv(time,status)~TGExp,data=timeDF)
plot(mod)
plot(x)
dim(timeDF)
dim(lung)
timeDF1
mod
str(lung$ph.ecog)
ploy(lung$ph.ecog)
plot(lung$ph.ecog)
plot(lung$ph.ecog)?lung
?lung
mod<-survfit(Surv(time,status)~age,data=timeDF)
plot(mod)
df=read.table("clinical.tsv")
df=read.table("clinical.tsv",sep = "\t")
df=data.table::fread("clinical.tsv")
head(df[,1:10])
View(df)
targetBulkMat=bulkMat[targetGenes,]
targetBulkMat=apply(bulkMat,2,function(x){
return(x/sum(x)*1e4)
})
targetZscore=rowZscores(as.matrix(targetBulkMat),min = -2.5,max = 2.5)
TG_expression=Matrix::colMeans(targetZscore,na.rm = TRUE)
timeDF<-read.csv("clinicalinfo_lnc_v1.csv",row.names = 1)
timeDF$TGExp<-TG_expression[rownames(timeDF)]
mod<-survfit(Surv(time,status)~timeDF,data=timeDF)
plot(mod)
View(timeDF)
TG_expression
mod<-survfit(Surv(time,status)~TGExp,data=timeDF)
plot(mod)
mod
install.packages("ggsurvplot")
head(lung)
x=survfit(Surv(time, status) ~ karno , data=lung)
x=survfit(Surv(time, status) ~ ph.karno , data=lung)
plot(x)
str(lung)
str(timeDF)
timeDF1$time<-timeDF1$time+sample(-10:500,size = nrow(timeDF1))
mod<-survfit(Surv(time,status)~TGExp,data=timeDF1)
plot(mod)
#timeDF1<-timeDF
#timeDF1$time<-timeDF1$time+sample(-10:500,size = nrow(timeDF1))
mod<-survfit(Surv(time,status)~TGExp,data=timeDF)
plot(mod)
timeDF$level<-sample(1:3,size=nrow(timeDF),replace = T)
#timeDF1<-timeDF
#timeDF1$time<-timeDF1$time+sample(-10:500,size = nrow(timeDF1))
mod<-survfit(Surv(time,status)~level,data=timeDF)
plot(mod)
head(timeDF)
#timeDF1<-timeDF
#timeDF1$time<-timeDF1$time+sample(-10:500,size = nrow(timeDF1))
mod<-survfit(Surv(time,status)~TGExp*100,data=timeDF)
timeDF$TGExp2<-timeDF$TGExp*100
#timeDF1<-timeDF
#timeDF1$time<-timeDF1$time+sample(-10:500,size = nrow(timeDF1))
mod<-survfit(Surv(time,status)~TGExp2,data=timeDF)
plot(mod)
timeDF
str(lung)
str(heart)
timeDF<-read.csv("clinicalinfo_lnc_v1.csv",row.names = 1)
dim(targetBulkMat=bulkMat[targetGenes,])
dim(targetBulkMat)
bulkMat=readRDS("dfsymbol.rds")
targetBulkMat=bulkMat[targetGenes,]
targetBulkMat<-targetBulkMat[,colnames(timeDF)]
targetBulkMat<-targetBulkMat[,rownames(timeDF)]
timeDF<-cbind(timeDF,t(targetBulkMat))
head(timeDF[,1:10])
#timeDF$level<-sample(1:3,size=nrow(timeDF),replace = T)
#timeDF1<-timeDF
#timeDF1$time<-timeDF1$time+sample(-10:500,size = nrow(timeDF1))
mod<-survfit(Surv(time,status)~NFKB1,data=timeDF)
#timeDF$level<-sample(1:3,size=nrow(timeDF),replace = T)
#timeDF1<-timeDF
#timeDF1$time<-timeDF1$time+sample(-10:500,size = nrow(timeDF1))
mod<-survfit(Surv(time,status)~IL1B,data=timeDF)
#timeDF$level<-sample(1:3,size=nrow(timeDF),replace = T)
#timeDF1<-timeDF
#timeDF1$time<-timeDF1$time+sample(-10:500,size = nrow(timeDF1))
mod<-survfit(Surv(time,status)~ACD,data=timeDF)
#timeDF$level<-sample(1:3,size=nrow(timeDF),replace = T)
#timeDF1<-timeDF
#timeDF1$time<-timeDF1$time+sample(-10:500,size = nrow(timeDF1))
mod<-survfit(Surv(time,status)~ACOT11,data=timeDF)
plot(mod)
head(tfgDF)
#timeDF$level<-sample(1:3,size=nrow(timeDF),replace = T)
#timeDF1<-timeDF
#timeDF1$time<-timeDF1$time+sample(-10:500,size = nrow(timeDF1))
mod<-survfit(Surv(time,status)~IL15,data=timeDF)
colnames(targetBulkMat)
rownames(targetBulkMat)
#timeDF$level<-sample(1:3,size=nrow(timeDF),replace = T)
#timeDF1<-timeDF
#timeDF1$time<-timeDF1$time+sample(-10:500,size = nrow(timeDF1))
mod<-survfit(Surv(time,status)~CCR9,data=timeDF)
plot(mod)
timeDF$level<-sample(1:2,size=nrow(timeDF),replace = T)
#timeDF1<-timeDF
#timeDF1$time<-timeDF1$time+sample(-10:500,size = nrow(timeDF1))
mod<-survfit(Surv(time,status)~level,data=timeDF)
plot(mod)
mode
mod
timeDF$level<-with(timeDF,ifelse(TGExp>0,1,0))
timeDF$TGExp<-TG_expression[rownames(timeDF)]
timeDF$level<-with(timeDF,ifelse(TGExp>0,1,0))
#timeDF1<-timeDF
#timeDF1$time<-timeDF1$time+sample(-10:500,size = nrow(timeDF1))
mod<-survfit(Surv(time,status)~TGExp,data=timeDF)
plot(mod)
mod
#timeDF1<-timeDF
#timeDF1$time<-timeDF1$time+sample(-10:500,size = nrow(timeDF1))
mod<-survfit(Surv(time,status)~level,data=timeDF)
plot(mod)
mod
summary(mod)
install.packages("ggsurvplot")
devtools::install_github("kassambara/survminer")
devtools::install_github("kassambara/survminer")
install.packages("corrplot")
devtools::install_github("kassambara/survminer")
tfgDF=readRDS("t2gDF.rds")
targetTF<-"NFKB1"
targetDF<-subset(tfgDF,str_detect(TF,targetTF))
targetGenes<-as.character(unique(targetDF$Gene))
bulkMat=readRDS("dfsymbol.rds")
targetBulkMat=bulkMat[targetGenes,]
targetZscore=rowZscores(as.matrix(targetBulkMat),min = -2.5,max = 2.5)
TG_expression=Matrix::colMeans(targetZscore,na.rm = TRUE)
timeDF<-read.csv("clinicalinfo_lnc_v1.csv",row.names = 1)
timeDF$TGExp<-TG_expression[rownames(timeDF)]
?quantile
quantile(timeDF$TGExp,probs = seq(0,1,1/3))
N<-3
cutoff<-quantile(timeDF$TGExp,probs = seq(0,1,1/N))[2]
cutoff
timeDF$level<-with(timeDF,ifelse(TGExp>cutoff,1,0))
mod<-survfit(Surv(time,status)~level,data=timeDF)
plot(mod)
mod
install.packages("ggpubr")
devtools::install_github("kassambara/survminer")
setwd("..")
library(devtools)
install_local("yipCat")
libr
BiocManager::install(c("flowCore","ComplexHeatmap","DropletUtils","scRepertoire","Rsamtools"))
install_github("immunogenomics/harmony")
install_github('satijalab/seurat-wrappers')
install_github("mojaveazure/seurat-disk")
BiocManager::install("batchelor")
library(yipCat)
?exportEmbCol
library(devtools)
library(roxygen2)
roxygenize("H:/Rpackage/yipCat")
library(yipCat)
setAppServer(pbmc_small,host=NULL,launch.browser = T)
?objectPipeline
objectPipeline
library(yipCat)
source('H:/Rpackage/yipCat/R/Trajectory.R')
se=readRDS("E:/文档/Plots/test-se.rds")
se
plotTrajHeatmap(se)
source('H:/Rpackage/yipCat/R/Trajectory.R')
plotTrajHeatmap(se)
library(roxygen2)
library(roxygen2)
roxygenize("H:/Rpackage/yipCat")
roxygenize("H:/Rpackage/yipCat")
roxygenize("H:/Rpackage/yipCat")
se=readRDS("E:/文档/Plots/test-se.rds")
plotTrajHeatmap(se)
BiocManager::install("slingshot")
?Embeddings
require("slingshot")
?embedding
?slingshot
addSlingShotTrajectories <- function(
object = NULL,
cells=NULL,
name = "SlingShot",
useGroups = NULL,
principalGroup = NULL,
groupBy = NULL,
embedding = NULL,
seed = 1
){
require("slingshot")
set.seed(seed)
if(!is.null(cells)){
object<-subset(object,cells=cells)
}
if(!is.null(embedding)){
rD <- Embeddings(object = object,reduction = "pca")
}else{
rD <- Embeddings(object = object,reduction = embedding)
}
metaData<-object@meta.data
groups <- metaData[,groupBy,drop=FALSE]
if(!is.null(useGroups)){
idx <- which(groups[,1] %in% useGroups)
rD <- rD[idx, , drop = FALSE]
groups <- groups[idx, , drop = FALSE]
}
message("run slingshot...")
sds <- slingshot(
data = rD,
clusterLabels = groups[rownames(rD), ],
start.clus = principalGroup
)
message("get PseudoTimes...")
pt <- slingPseudotime(sds)
colnames(pt) <- paste0(name, ".Curve", seq_len(ncol(pt)))
message("Scale...")
ptn <- apply(pt, 2, .getQuantiles) * 100
object<- AddMetaData(object,metadata = as.data.frame(ptn))
object
}
pbmc_small<-seurat=addSlingShotTrajectories(object=seurat,groupBy="old_MUMAP_clusters",embedding="mumap",useGroups=c("2","3","4","5"),principalGroup="2",cells=NULL)
head(pbmc_small@meta.data)
seurat=addSlingShotTrajectories(object=pbmc_small,groupBy="RNA_snn_res",embedding="pca",principalGroup="0",cells=NULL)
seurat=addSlingShotTrajectories(object=pbmc_small,groupBy="RNA_snn_res.1",embedding="pca",principalGroup="0",cells=NULL)
seurat
head(seurat@meta.data)
s=getSeuratTrajectory(seurat,splitBy = "groups")
s=getSeuratTrajectory(seurat,splitBy = "groups",name="SlingShot.Curve1" )
roxygenize("H:/Rpackage/yipCat")
library(yipCat)
seurat=addSlingShotTrajectories(object=pbmc_small,groupBy="RNA_snn_res.1",embedding="pca",principalGroup="0",cells=NULL)
head(seurat@meta.data)
FeaturePlot(seurat,reduction = "tsne",features = "SlingShot.Curve1")
?addSlingShotTrajectories
roxygenize("H:/Rpackage/yipCat")
library(roxygen2)
roxygenize("H:/Rpackage/yipCat")
library(devtools)
setwd("..")
build("yipCat")
library(yipCat)
